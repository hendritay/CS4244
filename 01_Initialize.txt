; Initializing rule
; Only run cipai(one time)

; If the module is not taken, move it to candidate module
; The copy from modulecandidate will move it to ALLMODULE

(defrule moveRequiredCoreModuleToCandidateModule 
    (object (is-a REQUIREDCOREMODULE) (moduleid ?moduleid))
	(not (exists (object (is-a MODULETAKEN) (moduleid ?moduleid))))
=>      
    (bind ?instancename (symbol-to-instance-name (sym-cat candidatemodule ?moduleid)))	   
	(make-instance ?instancename of CANDIDATEMODULE (moduleid ?moduleid))	
)

; Get those module who has no pre req, and it suddenly becomes eligible module 
(defrule getNoPreqModule
  (object (is-a MODULE) (moduleid ?moduleid))
  (not (exists (object (is-a SPECIALPREREQMODULE) (moduleid ?moduleid))))
  (not (exists (object (is-a MODULEPREQ) (moduleid ?moduleid))))
  (not (exists (object (is-a MODULETAKEN) (moduleid ?moduleid))))  
  (not (exists (object (is-a CANDIDATEMODULE) (moduleid ?moduleid))))  
=>   
   (bind ?instancename (symbol-to-instance-name (sym-cat eligiblemodule ?moduleid)))
   (make-instance ?instancename of ELIGIBLEMODULE (moduleid ?moduleid))   
)
 
; Rule that matches only based on the module taken 
; ---------------------------------------------------------------


; Interested Module to give higher score
 (defrule rule_interestedmodule
   (object (is-a INTERESTEDMODULE) (moduleid ?moduleid))
   (object (is-a SCORE) (interestedmodule ?score))
   ?module <- (object (is-a MODULE) (moduleid ?moduleid))
  =>
    (bind ?currentscore (send ?module get-moduletagscore))   
    (send ?module put-moduletagscore (+ ?currentscore ?score))
  )
 
  
; Calculate Based On Module tag
(defrule moduletagcalculation
  (object (is-a INTERESTEDTAG) (tag ?interestedtag) )  
  (object (is-a MODULETAG) (moduletag ?interestedtag) (moduletagscore ?score) (moduleid ?moduleid))
  ?module <- (object (is-a MODULE) (moduleid ?moduleid))
  =>
  (bind ?currentscore (send ?module get-moduletagscore))   
   (send ?module put-moduletagscore (+ ?currentscore ?score))
)

; Give more marks for Focus Area module
(defrule focusareacalculation
  (object (is-a FOCUSAREA) (moduleid ?moduleid) (type SECONDARY))
  (object (is-a SCORE) (focussecondary ?score))
  ?module <- (object (is-a MODULE) (moduleid ?moduleid))
  =>
   (bind ?currentscore (send ?module get-modulescore))   
   (send ?module put-modulescore (+ ?currentscore ?score))
)


(defrule CheckForFocusArea
   (object (is-a MODULETAKEN) (moduleid ?moduleid))   
   (object (is-a FOCUSAREA) (type PRIMARY) (moduleid ?moduleid))
 =>
   (bind ?totalmodule (send ?*requirement* get-focusareamodule))
   (bind ?newmodule (- ?totalmodule 1))
   (send ?*requirement* put-focusareamodule ?newmodule)
)